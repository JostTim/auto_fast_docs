{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":""},{"location":"index.html#automatic-documentation-for-your-python-repository","title":"Automatic documentation for your python repository.","text":"<p>With fast setup and no extra effort. This package is designed to be ran in containerized CI/CD.</p> <p>It's purpose is quite simple :  leveraging mkdocs, mkdocs-material and mkdocstrings, and scanning your repository's pyhton source files. When it finds a function or class, it groups it nicely, and generates folders and markdown files with the appropriate mkdocstrings headers, inside a <code>docs</code> folder, used for the static website generation on github or gitlab pages.</p> <p>This folder will not appear in your repo if you run this package in a github/gitlab  CI/CD container, but will still exist at container runtime to generate and publish the website.</p>"},{"location":"index.html#usage","title":"Usage","text":"<p>Drop it on top level of your package wrapper folder, and add two lines in your github/gitlab ci/cd file : (click the link to see a working example, that built this present repo's documentation page)</p> <pre><code>pip install auto_fast_docs\nauto_fast_docs MyPackage\n</code></pre> <p>I strongly recommand giving it your username so that it can also build an mkdocs.yml file by itself !</p> <pre><code>pip install auto_fast_docs\nauto_fast_docs MyPackage --username MyGtihubUsername\n</code></pre>"},{"location":"index.html#check-the-result","title":"Check the result","text":"<p>Here is an example of the result (and also a documentation for this repo's code)</p>"},{"location":"index.html#install","title":"Install","text":"<p>Pypi releases : https://pypi.org/project/auto-fast-docs/</p> <pre><code>pip install auto_fast_docs\n</code></pre> <p>or most recent commit from github :</p> <pre><code>pip install git+https://github.com/JostTim/auto_fast_docs.git\n</code></pre>"},{"location":"index.html#options","title":"Options :","text":"<p>It supports a few options to simplify your dev life even more and be platform a-specific: </p> <p>All options are case insensitive, except for the positionnal argument package_name</p>"},{"location":"index.html#-username","title":"--username","text":"<p>Name of the user that owns the repository. If it is supplied and no <code>mkdocs.yml</code> file is present in the repo, auto_fast_doc will attempt to fill in the information automatically. If you don't supply this info, it will not generate the mkocs.yml file by itself. <pre><code>auto_fast_docs MyPackage --username MyUsername \n</code></pre></p>"},{"location":"index.html#-layout","title":"--layout","text":"<p>Flat or src layout style of your code in the repository. By default, <code>layout=\"flat\"</code></p> <pre><code>auto_fast_docs MyPackage --layout src \n</code></pre> <p>The flat layout structure is standardized like this :</p> <ul> <li> PackageRepo</li> <li> setup.py</li> <li> pyproject.toml</li> <li> mkdocs.yml</li> <li> docs<ul> <li> index.md</li> </ul> </li> <li> Package<ul> <li> __init__.py</li> <li> myfile.py</li> <li> mysubpackage</li> <li> __init__.py</li> <li> myfile2.py</li> </ul> </li> </ul> <p>While the src layout is standardized like this :</p> <ul> <li> PackageRepo</li> <li> setup.py</li> <li> pyproject.toml</li> <li> mkdocs.yml</li> <li> docs<ul> <li> index.md</li> </ul> </li> <li> src<ul> <li> Package</li> <li> __init__.py</li> <li> myfile.py</li> <li> mysubpackage<ul> <li> __init__.py</li> <li> myfile2.py</li> </ul> </li> </ul> </li> </ul> <p>Note that auto_fast_docs doesn't care about <code>pyproject.toml</code> or <code>setup.py</code>, any can be used. Also note that the docs folder, and the mkdocs.yml file here are both also not necessary, if you supply at least the <code>--username</code> option (see above) (and of course, if you are on github on a user hosted repo. Otherwise, see <code>--platform</code> and <code>--groups</code> options below)</p>"},{"location":"index.html#-platform","title":"--platform","text":"<p>The platform (<code>github</code> or <code>gitlab</code>) on wich you are building the pages into. The default is <code>github</code></p> <pre><code>auto_fast_docs MyPackage --platform gitlab \n</code></pre> <p>Note that in the case of gitlab, if you are not on the central gitlab.com repository but on a instance hosted by a compagny, you can supply the suffix after gitlab, separated with a semicolon <code>:</code></p> <pre><code>auto_fast_docs MyPackage --platform gitlab:pasteur.fr\n</code></pre> <p>By default, if nothing is supplied with a semicolon after the platform name, the suffix is set to <code>com</code> (giving out github.com and gitlab.com)</p>"},{"location":"index.html#-groups","title":"--groups","text":"<p>If your repository is not in your own package, you must supply the group name.(that's the organization name on github)</p> <pre><code>auto_fast_docs MyPackage --platform gitlab:pasteur.fr --groups mymaingroup/mysubgroup \n</code></pre> <p>Note that if group is used, it is still necessary to supply the username - even thoug it is not used for the repository path assembly - if you want the <code>mkdocs.yml</code> file to be generated.</p> <p>In the case of gitlab, an arbitrary number of groups can be nested (while github doesn't allow nested organizations). Simmply separate them using forward slashes <code>/</code> and auto_fast_docs should manage to assemble the final path by itself, depending on your platform.</p>"},{"location":"index.html#small-note","title":"Small note :","text":"<p>On github, you will also need : - to allow Read and write permissions for workflow in your repo settings, under <code>settings &gt; actions &gt; general &gt; Workflow permissions</code> - to set the pages deployments branch to gh-pages, under : <code>settings &gt; pages &gt; Build and deployment &gt; Source</code> to <code>deploy from a branch</code> and <code>settings &gt; pages &gt; Build and deployment &gt;  Branch</code> to your <code>gh-pages</code> branch   (this branch will appear after the first sucessfull mkocs build, except if you created it yourself.)</p>"},{"location":"auto_doc/MkdocsConfigurator.html","title":"MkdocsConfigurator","text":""},{"location":"auto_doc/MkdocsConfigurator.html#auto_fast_docs.auto_doc.MkdocsConfigurator","title":"MkdocsConfigurator  <code>dataclass</code>","text":""},{"location":"auto_doc/MkdocsConfigurator.html#auto_fast_docs.auto_doc.MkdocsConfigurator-attributes","title":"Attributes","text":""},{"location":"auto_doc/MkdocsConfigurator.html#auto_fast_docs.auto_doc.MkdocsConfigurator.content","title":"auto_fast_docs.auto_doc.MkdocsConfigurator.content  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>content = ''\n</code></pre>"},{"location":"auto_doc/MkdocsConfigurator.html#auto_fast_docs.auto_doc.MkdocsConfigurator.file_path","title":"auto_fast_docs.auto_doc.MkdocsConfigurator.file_path  <code>instance-attribute</code>","text":"<pre><code>file_path: str\n</code></pre>"},{"location":"auto_doc/MkdocsConfigurator.html#auto_fast_docs.auto_doc.MkdocsConfigurator-functions","title":"Functions","text":""},{"location":"auto_doc/MkdocsConfigurator.html#auto_fast_docs.auto_doc.MkdocsConfigurator.add_line","title":"auto_fast_docs.auto_doc.MkdocsConfigurator.add_line","text":"<pre><code>add_line(line)\n</code></pre>"},{"location":"auto_doc/MkdocsConfigurator.html#auto_fast_docs.auto_doc.MkdocsConfigurator.add_lines_from_template","title":"auto_fast_docs.auto_doc.MkdocsConfigurator.add_lines_from_template","text":"<pre><code>add_lines_from_template()\n</code></pre>"},{"location":"auto_doc/MkdocsConfigurator.html#auto_fast_docs.auto_doc.MkdocsConfigurator.auto_config","title":"auto_fast_docs.auto_doc.MkdocsConfigurator.auto_config","text":"<pre><code>auto_config(repository_conf: RepositoryConfigurator)\n</code></pre>"},{"location":"auto_doc/MkdocsConfigurator.html#auto_fast_docs.auto_doc.MkdocsConfigurator.config_exists","title":"auto_fast_docs.auto_doc.MkdocsConfigurator.config_exists","text":"<pre><code>config_exists() -&gt; bool\n</code></pre>"},{"location":"auto_doc/MkdocsConfigurator.html#auto_fast_docs.auto_doc.MkdocsConfigurator.current_content","title":"auto_fast_docs.auto_doc.MkdocsConfigurator.current_content","text":"<pre><code>current_content(with_nav=True) -&gt; list\n</code></pre>"},{"location":"auto_doc/MkdocsConfigurator.html#auto_fast_docs.auto_doc.MkdocsConfigurator.write_file","title":"auto_fast_docs.auto_doc.MkdocsConfigurator.write_file","text":"<pre><code>write_file()\n</code></pre>"},{"location":"auto_doc/MkdocsConfigurator.html#auto_fast_docs.auto_doc.MkdocsConfigurator.write_mkdocs_nav","title":"auto_fast_docs.auto_doc.MkdocsConfigurator.write_mkdocs_nav","text":"<pre><code>write_mkdocs_nav(nav_dic: dict) -&gt; None\n</code></pre>"},{"location":"auto_doc/PyfileParser.html","title":"PyfileParser","text":""},{"location":"auto_doc/PyfileParser.html#auto_fast_docs.auto_doc.PyfileParser","title":"PyfileParser","text":"<pre><code>PyfileParser(path)\n</code></pre> <p>             Bases: <code>NodeVisitor</code></p> <p>Attributes:</p> Name Type Description <code>modulename</code> <code>str</code> <p>the name of the module without the .py extension</p> <code>content</code> <code>dict</code> <p>a dictionnary with two keys : <code>functions</code> and <code>classes</code>, each of wich containing a list of the classes and functions in the module with the format : \"module.fooclass\" or \"module.foofunction\". <code>content</code> doesn't registers classes internal functions.</p> <p>Constructor method of the class. Args:     path (str): The full path to a python file that has been parsed. Returns:     mkds_pyfile_parser : An instance of this class.</p>"},{"location":"auto_doc/PyfileParser.html#auto_fast_docs.auto_doc.PyfileParser-attributes","title":"Attributes","text":""},{"location":"auto_doc/PyfileParser.html#auto_fast_docs.auto_doc.PyfileParser.content","title":"auto_fast_docs.auto_doc.PyfileParser.content  <code>instance-attribute</code>","text":"<pre><code>content = {'functions': [], 'classes': []}\n</code></pre>"},{"location":"auto_doc/PyfileParser.html#auto_fast_docs.auto_doc.PyfileParser.context","title":"auto_fast_docs.auto_doc.PyfileParser.context  <code>instance-attribute</code>","text":"<pre><code>context = [modulename]\n</code></pre>"},{"location":"auto_doc/PyfileParser.html#auto_fast_docs.auto_doc.PyfileParser.modulename","title":"auto_fast_docs.auto_doc.PyfileParser.modulename  <code>instance-attribute</code>","text":"<pre><code>modulename = splitext(split(path)[1])[0]\n</code></pre>"},{"location":"auto_doc/PyfileParser.html#auto_fast_docs.auto_doc.PyfileParser.path","title":"auto_fast_docs.auto_doc.PyfileParser.path  <code>instance-attribute</code>","text":"<pre><code>path = path\n</code></pre>"},{"location":"auto_doc/PyfileParser.html#auto_fast_docs.auto_doc.PyfileParser.visit_AsyncFunctionDef","title":"auto_fast_docs.auto_doc.PyfileParser.visit_AsyncFunctionDef  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>visit_AsyncFunctionDef = visit_FunctionDef\n</code></pre>"},{"location":"auto_doc/PyfileParser.html#auto_fast_docs.auto_doc.PyfileParser-functions","title":"Functions","text":""},{"location":"auto_doc/PyfileParser.html#auto_fast_docs.auto_doc.PyfileParser.aggreg_context","title":"auto_fast_docs.auto_doc.PyfileParser.aggreg_context","text":"<pre><code>aggreg_context()\n</code></pre>"},{"location":"auto_doc/PyfileParser.html#auto_fast_docs.auto_doc.PyfileParser.check_exclusion","title":"auto_fast_docs.auto_doc.PyfileParser.check_exclusion","text":"<pre><code>check_exclusion(node, exclusion_context)\n</code></pre>"},{"location":"auto_doc/PyfileParser.html#auto_fast_docs.auto_doc.PyfileParser.is_empty","title":"auto_fast_docs.auto_doc.PyfileParser.is_empty","text":"<pre><code>is_empty()\n</code></pre> <p>Returns:</p> Name Type Description <code>bool</code> <p>DESCRIPTION.</p>"},{"location":"auto_doc/PyfileParser.html#auto_fast_docs.auto_doc.PyfileParser.visit","title":"auto_fast_docs.auto_doc.PyfileParser.visit","text":"<pre><code>visit(generic_arg=None)\n</code></pre> <p>Takes as argument the output of ast.parse(). Itself takes as argument the str returned by reading a whole <code>.py</code> file. This method is the way we visit every node of the file and on the way, we register the classes and functions names. Returns:     NoneType : Returns None. Use to be able to fill <code>content</code> with the classes and methods of the file. Example:     <pre><code>parser = mkds_pyfile_parser(filepath)\nparser.visit()\nprint(parser.content)\n</code></pre> Tip:     To explude functions/classes from being returned and lead to the creation of a mkdoctrings entry,     use the balise :     <code>EXCLUDE_FUNC_OR_CLASS_FROM_MKDOCSTRINGS</code>     anywhere in the doctring of your function/class.     In the same way, a whole module can be excluded by including the balise     &lt;<code>EXCLUDE_MODULE_FROM_MKDOCSTRINGS</code>&gt; (with angle brackets)     anywhere in the boilerplate at the top of your module.</p>"},{"location":"auto_doc/PyfileParser.html#auto_fast_docs.auto_doc.PyfileParser.visit_ClassDef","title":"auto_fast_docs.auto_doc.PyfileParser.visit_ClassDef","text":"<pre><code>visit_ClassDef(node)\n</code></pre>"},{"location":"auto_doc/PyfileParser.html#auto_fast_docs.auto_doc.PyfileParser.visit_FunctionDef","title":"auto_fast_docs.auto_doc.PyfileParser.visit_FunctionDef","text":"<pre><code>visit_FunctionDef(node) -&gt; Any\n</code></pre>"},{"location":"auto_doc/PyfileParser.html#auto_fast_docs.auto_doc.PyfileParser.visit_Lambda","title":"auto_fast_docs.auto_doc.PyfileParser.visit_Lambda","text":"<pre><code>visit_Lambda(node)\n</code></pre>"},{"location":"auto_doc/PyfileParser.html#auto_fast_docs.auto_doc.PyfileParser.visit_Module","title":"auto_fast_docs.auto_doc.PyfileParser.visit_Module","text":"<pre><code>visit_Module(node)\n</code></pre>"},{"location":"auto_doc/RepositoryConfigurator.html","title":"RepositoryConfigurator","text":""},{"location":"auto_doc/RepositoryConfigurator.html#auto_fast_docs.auto_doc.RepositoryConfigurator","title":"RepositoryConfigurator","text":"<pre><code>RepositoryConfigurator(args)\n</code></pre>"},{"location":"auto_doc/RepositoryConfigurator.html#auto_fast_docs.auto_doc.RepositoryConfigurator-functions","title":"Functions","text":""},{"location":"auto_doc/RepositoryConfigurator.html#auto_fast_docs.auto_doc.RepositoryConfigurator.create_index","title":"auto_fast_docs.auto_doc.RepositoryConfigurator.create_index","text":"<pre><code>create_index()\n</code></pre>"},{"location":"auto_doc/RepositoryConfigurator.html#auto_fast_docs.auto_doc.RepositoryConfigurator.get_mkdocstrings_file_content","title":"auto_fast_docs.auto_doc.RepositoryConfigurator.get_mkdocstrings_file_content","text":"<pre><code>get_mkdocstrings_file_content(item_name: str, item_type: str) -&gt; str\n</code></pre>"},{"location":"auto_doc/RepositoryConfigurator.html#auto_fast_docs.auto_doc.RepositoryConfigurator.make_markdown_files","title":"auto_fast_docs.auto_doc.RepositoryConfigurator.make_markdown_files","text":"<pre><code>make_markdown_files()\n</code></pre>"},{"location":"auto_doc/RepositoryConfigurator.html#auto_fast_docs.auto_doc.RepositoryConfigurator.run","title":"auto_fast_docs.auto_doc.RepositoryConfigurator.run","text":"<pre><code>run()\n</code></pre>"},{"location":"auto_doc/RepositoryConfigurator.html#auto_fast_docs.auto_doc.RepositoryConfigurator.set_cwd","title":"auto_fast_docs.auto_doc.RepositoryConfigurator.set_cwd","text":"<pre><code>set_cwd(path)\n</code></pre>"},{"location":"auto_doc/RepositoryConfigurator.html#auto_fast_docs.auto_doc.RepositoryConfigurator.set_git_platform","title":"auto_fast_docs.auto_doc.RepositoryConfigurator.set_git_platform","text":"<pre><code>set_git_platform(git_platform: str)\n</code></pre>"},{"location":"auto_doc/RepositoryConfigurator.html#auto_fast_docs.auto_doc.RepositoryConfigurator.set_layout_type","title":"auto_fast_docs.auto_doc.RepositoryConfigurator.set_layout_type","text":"<pre><code>set_layout_type(layout)\n</code></pre>"},{"location":"auto_doc/RepositoryConfigurator.html#auto_fast_docs.auto_doc.RepositoryConfigurator.set_package_name","title":"auto_fast_docs.auto_doc.RepositoryConfigurator.set_package_name","text":"<pre><code>set_package_name(name)\n</code></pre>"},{"location":"auto_doc/RepositoryConfigurator.html#auto_fast_docs.auto_doc.RepositoryConfigurator.set_platform_groups","title":"auto_fast_docs.auto_doc.RepositoryConfigurator.set_platform_groups","text":"<pre><code>set_platform_groups(groups: str)\n</code></pre>"},{"location":"auto_doc/RepositoryConfigurator.html#auto_fast_docs.auto_doc.RepositoryConfigurator.set_username","title":"auto_fast_docs.auto_doc.RepositoryConfigurator.set_username","text":"<pre><code>set_username(username)\n</code></pre>"},{"location":"auto_doc/RepositoryConfigurator.html#auto_fast_docs.auto_doc.RepositoryConfigurator.update_doc_path","title":"auto_fast_docs.auto_doc.RepositoryConfigurator.update_doc_path","text":"<pre><code>update_doc_path()\n</code></pre>"},{"location":"auto_doc/RepositoryConfigurator.html#auto_fast_docs.auto_doc.RepositoryConfigurator.update_package_path","title":"auto_fast_docs.auto_doc.RepositoryConfigurator.update_package_path","text":"<pre><code>update_package_path()\n</code></pre>"},{"location":"auto_doc/RepositoryConfigurator.html#auto_fast_docs.auto_doc.RepositoryConfigurator.update_package_url","title":"auto_fast_docs.auto_doc.RepositoryConfigurator.update_package_url","text":"<pre><code>update_package_url()\n</code></pre>"},{"location":"auto_doc/RepositoryConfigurator.html#auto_fast_docs.auto_doc.RepositoryConfigurator.update_static_doc_url","title":"auto_fast_docs.auto_doc.RepositoryConfigurator.update_static_doc_url","text":"<pre><code>update_static_doc_url()\n</code></pre>"},{"location":"auto_doc/console_mkds_make_docfiles.html","title":"console_mkds_make_docfiles","text":""},{"location":"auto_doc/console_mkds_make_docfiles.html#auto_fast_docs.auto_doc.console_mkds_make_docfiles","title":"console_mkds_make_docfiles","text":"<pre><code>console_mkds_make_docfiles()\n</code></pre> <p>Calls the auto-doc program on a code repository.</p>"},{"location":"discover/find_files.html","title":"find_files","text":""},{"location":"discover/find_files.html#auto_fast_docs.discover.find_files","title":"find_files","text":"<pre><code>find_files(input_path, re_pattern=None, relative=False, levels=-1, get='files', parts='all', sort=True)\n</code></pre> <p>Get full path of files from all folders under the <code>input_path</code> (including itself). Can return specific files with optionnal conditions Args:     input_path (str): A valid path to a folder.         This folder is used as the root to return files found         (possible condition selection by giving to re_callback a function taking a regexp pattern and a string as         argument, an returning a boolean). Returns:     list: List of the file fullpaths found under <code>input_path</code> folder and subfolders.</p>"},{"location":"discover/find_python_files.html","title":"find_python_files","text":""},{"location":"discover/find_python_files.html#auto_fast_docs.discover.find_python_files","title":"find_python_files","text":"<pre><code>find_python_files(search_path)\n</code></pre>"},{"location":"discover/qregexp.html","title":"qregexp","text":""},{"location":"discover/qregexp.html#auto_fast_docs.discover.qregexp","title":"qregexp","text":"<pre><code>qregexp(regex, input_line, groupidx=None, matchid=None, case=False)\n</code></pre> <p>Simplified implementation for matching regular expressions. Utility for python's built_in module re .</p> Tip <p>Design your patterns easily at Regex101</p> <p>Parameters:</p> Name Type Description Default <code>input_line</code> <code>str</code> <p>Source on wich the pattern will be searched.</p> required <code>regex</code> <code>str</code> <p>Regex pattern to match on the source.</p> required <code>**kwargs</code> <code>optional</code> <ul> <li>groupidx : (<code>int</code>)     group index in case there is groups. Defaults to None (first group returned)</li> <li>matchid : (<code>int</code>)     match index in case there is multiple matchs. Defaults to None (first match returned)</li> <li>case : (<code>bool</code>)     <code>False</code> / <code>True</code> : case sensitive regexp matching (default <code>False</code>)</li> </ul> required <p>Returns:</p> Type Description <p>Bool , str: False or string containing matched content.</p> Warning <p>This function returns only one group/match.</p>"}]}